<style>
body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #f9f9f9;
    height: auto;
    min-height: 100vh;
    overflow: hidden;
}
.container {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    height: 100vh;
    overflow: auto;
}
.date-ruler {
    width: 140px; /* was 160px */
    background: #eaeaea;
    padding: 0 10px;
    overflow-y: auto;
    border-right: 1px solid #ccc;
    box-sizing: border-box;
    position: relative;
    height: 100%;
    min-height: 100vh;
}
.ruler-axis {
    position: absolute;
    left: 20px; /* adjust if needed */
    top: 0;
    width: 2px;
    background: #bbb;
    z-index: 0;
}
.graduation {
    position: absolute;
    left: 100px; /* adjust for new width */
    width: 18px;
    height: 1px;
    background: #888;
    z-index: 1;
}
.month-label {
    position: absolute;
    left: 30px; /* adjust for new width */
    font-size: 10px;
    color: #444;
    height: 16px;
    line-height: 16px;
    z-index: 2;
}
.year-label {
    position: absolute;
    left: 60px; /* adjust for new width */
    font-size: 14px;
    font-weight: bold;
    color: #222;
    height: 18px;
    line-height: 18px;
    z-index: 2;
}
.year-line {
    position: absolute;
    left: 0;
    width: 100%;
    height: 2px;
    background: #bbb;
    z-index: 3;
    opacity: 0.5;
}
.fresco-content {
    flex: 1;
    padding: 0;
    overflow: hidden;
}
.show-section {
    display: inline-block;
    margin: 8px;
    padding: 0 0 10 0;
}
</style>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fresco des présidents et ministres de l'Environnement</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
<body>

<header style="overflow: hidden; border-bottom: 1px solid #ccc; background: #fff;">
    <h1 style="margin: 16px; font-size: 24px; color: #333;">Fresco des présidents et ministres de l'Environnement (depuis 1958)</h1>
    <div class="show-section"><b>Montrer : </b></div>
    <div class="show-section"><input type="checkbox" id="president-show-button" name="column" value="show" checked /> Présidents </div>
    <div class="show-section"><input type="checkbox" id="pm-show-button" name="column" value="show" checked /> Premier·es ministres </div>
    <div class="show-section"><input type="checkbox" id="tutelle-show-button" name="column" value="show" checked /> Ministres de tutelle </div>
    <div class="show-section"><input type="checkbox" id="delegue-show-button" name="column" value="show" checked /> Ministres délégué·e·s ou secrétaires d'État </div>
</header>


<div class="container">
    <div class="date-ruler" id="dateRuler"></div>
    <div class="fresco-content">
        <!-- Fresco content goes here -->
    </div>
</div>

<dialog id="infoDialog">
  <h2 id="dialogName"></h2>
  <p><strong>Intitulé :</strong> <span id="dialogIntitule"></span></p>
  <p><strong>Dates :</strong> <span id="dialogDates"></span></p>
  <p><strong>Notes :</strong></p>
  <p id="dialogNotes"></p>
  <button onclick="document.getElementById('infoDialog').close()">Fermer</button>
</dialog>

<script>
const startYear = 1958;
const endYear = new Date().getFullYear()+1;
const monthNames = ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."];

// Height per month in px
const monthHeight = 14;
const rulerHeight = ((endYear - startYear + 1) * 12) * monthHeight;

const dateRuler = document.getElementById('dateRuler');
dateRuler.style.position = 'relative';
dateRuler.style.height = rulerHeight + 'px';

const axis = document.createElement('div');
axis.className = 'ruler-axis';
axis.style.height = rulerHeight + 'px';
dateRuler.appendChild(axis);

let y = 0;
for (let year = startYear; year <= endYear; year++) {
    for (let m = 0; m < 12; m++) {
        if (year === endYear && m > new Date().getMonth()) break;

        // Graduation line
        const grad = document.createElement('div');
        grad.className = 'graduation';
        grad.style.top = y + 'px';
        if (m === 0) {
            grad.style.height = '3px'; // bolder for January
            grad.style.background = '#222';
            grad.style.width = '30px';
        } else {
            grad.style.height = '1px';
            grad.style.background = '#888';
            grad.style.width = '18px';
        }
        dateRuler.appendChild(grad);

        // Month label
        const monthLabel = document.createElement('div');
        monthLabel.className = 'month-label';
        monthLabel.style.top = (y - 8) + 'px';
        monthLabel.textContent = monthNames[m];
        dateRuler.appendChild(monthLabel);

        // Year label (only on January)
        if (m === 0) {
            const yearLabel = document.createElement('div');
            yearLabel.className = 'year-label';
            yearLabel.style.top = (y - 8) + 'px';
            yearLabel.textContent = year;
            dateRuler.appendChild(yearLabel);
        }
        y += monthHeight;
    }
}

/**
 * Helper to get Y position from a date string "YYYY-MM-DD"
 * Handles partial months by using the day value.
 */
function getYPosition(dateStr) {
    const [year, month, day] = dateStr.split('-').map(Number);
    // month: 1-based (1=Jan), day: 1-based
    const monthsSinceStart = (year - startYear) * 12 + (month - 1);
    // If day is present, add fraction of month
    let y = monthsSinceStart * monthHeight;
    if (!isNaN(day)) {
        // Assume 30.44 as average days per month for smoother placement
        y += ((day - 1) / 30.44) * monthHeight;
    }
    return y;
}

const frescoContent = document.querySelector('.fresco-content');
frescoContent.style.position = 'relative';
frescoContent.style.height = rulerHeight + 'px';



// Helper to darken a hex color
function darkenColor(hex, percent) {
    hex = hex.replace('#', '');
    if (hex.length === 3) hex = hex.split('').map(x => x + x).join('');
    const num = parseInt(hex, 16);
    let r = (num >> 16) - Math.round(2.55 * percent);
    let g = ((num >> 8) & 0x00FF) - Math.round(2.55 * percent);
    let b = (num & 0x0000FF) - Math.round(2.55 * percent);
    r = Math.max(0, r); g = Math.max(0, g); b = Math.max(0, b);
    return '#' + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');
}



//Helper to show info dialog
function openInfoDialog(data) {
    document.getElementById('dialogName').textContent = data.name;
    document.getElementById('dialogIntitule').textContent = data.intitule;
    document.getElementById('dialogDates').textContent = data.start + " → " + data.end;
    document.getElementById('dialogNotes').textContent = data.notes || "(Aucune note)";
    
    document.getElementById('infoDialog').showModal();
}

// Clear only the columns, not the whole structure
frescoContent.innerHTML = "";

// Create a wrapper for the columns (flex row)
const columnsWrapper = document.createElement('div');
columnsWrapper.style.display = 'flex';
columnsWrapper.style.flexDirection = 'row';

// Column definitions
const columns = [
    { id: 'fresco_column_presidents', label: "Présidents" },
    { id: 'fresco_column_pm', label: "Premiers ministres" },
    { id: 'fresco_column_tutelle', label: "Ministre de tutelle" },
    { id: 'fresco_column_delegue', label: "Ministre délégué ou secrétaire d'État" }
];

// Event listeners for checkboxes
document.getElementById('president-show-button').addEventListener('change', function() {
    document.getElementById('fresco_column_presidents').style.display = this.checked ? 'block' : 'none';
});
document.getElementById('pm-show-button').addEventListener('change', function() {
    document.getElementById('fresco_column_pm').style.display = this.checked ? 'block' : 'none';
});
document.getElementById('tutelle-show-button').addEventListener('change', function() {
    document.getElementById('fresco_column_tutelle').style.display = this.checked ? 'block' : 'none';
});
document.getElementById('delegue-show-button').addEventListener('change', function() {
    document.getElementById('fresco_column_delegue').style.display = this.checked ? 'block' : 'none';
});

// Store references for later population
const columnRefs = {};

// Create columns
columns.forEach((colDef, idx) => {
    const col = document.createElement('div');
    col.id = colDef.id;
    col.style.position = 'relative';
    col.style.height = rulerHeight + 'px';
    col.style.flex = '1';
    col.style.minWidth = '200px'; 
    col.style.marginLeft = idx > 0 ? '16px' : '0';
    if (idx > 0) col.style.marginLeft = '32px';

    // Label as absolutely positioned, does not affect block positioning
    const label = document.createElement('div');
    label.textContent = colDef.label;
    label.style.position = 'absolute';
    label.style.top = '0';
    label.style.left = '0';
    label.style.width = '100%';
    label.style.fontWeight = 'bold';
    label.style.fontSize = '18px';
    label.style.color = '#333';
    label.style.padding = '4px 0 8px 16px';
    label.style.background = '#fff';
    label.style.borderBottom = '1px solid #ddd';
    label.style.zIndex = '10';
    label.style.pointerEvents = 'none';

    col.appendChild(label);
    columnsWrapper.appendChild(col);
    columnRefs[colDef.id] = col;
});

// Add the columns wrapper to frescoContent
frescoContent.appendChild(columnsWrapper);



function createFrescoBlock(data) {
    const yStart = getYPosition(data.start);
    const yEnd = getYPosition(data.end);
    const height = yEnd - yStart;
    const borderColor = darkenColor(data.color, 20);

    // Create block container
    const block = document.createElement('div');
    block.style.position = 'absolute';
    block.style.top = yStart + 'px';
    block.style.width = '100%';
    block.style.height = height + 'px';
    block.style.background = data.color;
    block.style.color = '#fff';
    block.style.display = 'flex';
    block.style.flexDirection = 'column';
    block.style.justifyContent = 'flex-start';
    block.style.padding = '10px 12px 6px 16px';
    block.style.fontFamily = 'inherit';
    block.style.border = '2px solid ' + borderColor;
    block.style.boxSizing = 'border-box';

    //  New condition for opacity
    if (data.intitule === 'Premier ministre') {
        block.style.opacity = '0.3';
    }

    // Name (bold, larger)
    const nameDiv = document.createElement('div');
    nameDiv.textContent = data.name;
    nameDiv.style.fontWeight = 'bold';
    nameDiv.style.fontSize = '18px';
    nameDiv.style.lineHeight = '1.2';
    nameDiv.style.marginBottom = '2px';

    // Intitulé (normal, smaller)
    const intituleDiv = document.createElement('div');
    intituleDiv.textContent = data.intitule;
    intituleDiv.style.fontWeight = 'normal';
    intituleDiv.style.fontSize = '14px';
    intituleDiv.style.lineHeight = '1.2';
    intituleDiv.style.marginBottom = '4px';

    // Dates (small, just after)
    const datesDiv = document.createElement('div');
    datesDiv.textContent = data.start + " → " + data.end;
    datesDiv.style.fontSize = '11px';
    datesDiv.style.opacity = '0.85';
    datesDiv.style.marginTop = '0';

    // Assemble
    block.appendChild(nameDiv);
    block.appendChild(intituleDiv);
    block.appendChild(datesDiv);

    // Click to show more info
    block.style.cursor = 'pointer';
    block.addEventListener('click', () => openInfoDialog(data));

    return block;
}

//import data from JSON files or define inline for testing

// Global variables to store all loaded data
let presidentsData = [];
let primeMinistersData = [];
let tutellesData = [];
let deleguesSecretairesData = [];

// Function to load JSON data from a file
async function loadJSONData(filename) {
    try {
        const response = await fetch(filename);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} for file: ${filename}`);
        }
        return await response.json();
    } catch (error) {
        console.error(`Error loading JSON data from ${filename}:`, error);
        return null;
    }
}

// Main function to load all data
async function loadAllData() {
    try {
        // Load leaders data
        const leadersData = await loadJSONData('leaders.json');
        if (leadersData) {
            presidentsData = leadersData.presidents.map(president => ({
                ...president,
                type: 'president'
            }));
            
            primeMinistersData = leadersData.primeMinisters.map(pm => ({
                ...pm,
                type: 'primeMinister'
            }));
        }
        
        // Load tutelles data
        const tutellesDataRaw = await loadJSONData('tutelles.json');
        if (tutellesDataRaw) {
            tutellesData = tutellesDataRaw.tutelles.map(item => ({
                ...item,
                type: 'tutelle'
            }));
        }

        // Load deleguesSecretaires data
        const deleguesDataRaw = await loadJSONData('deleguesSecretaires.json');
        if (deleguesDataRaw) {
            deleguesSecretairesData = deleguesDataRaw.deleguesSecretaires.map(item => ({
                ...item,
                type: 'delegueSecretaire'
            }));

         }
        
        console.log('All data loaded successfully:', {
            presidents: presidentsData,
            primeMinisters: primeMinistersData,
            tutelles: tutellesData,
            deleguesSecretaires: deleguesSecretairesData
        });
        
        return {
            presidents: presidentsData,
            primeMinisters: primeMinistersData,
            tutelles: tutellesData,
            deleguesSecretaires: deleguesSecretairesData
        };
    } catch (error) {
        console.error('Error loading data:', error);
    }
}

function display_column(columnId, dataArray) {
    const column = columnRefs[columnId];
    if (!column) {
        console.error(`Column with ID ${columnId} not found.`);
        return;
    }
    // Clear existing blocks
    column.innerHTML = column.querySelector('div').outerHTML; // Keep only the label

    dataArray.forEach(data => {
        const block = createFrescoBlock(data);
        column.appendChild(block);
    });
}

// Call this function when your page loads
document.addEventListener('DOMContentLoaded', () => {
    loadAllData().then(data => {
        // Your visualization code can go here
        // All data is now available:
        // data.presidents, data.primeMinisters, data.tutelles, data.deleguesSecretaires
        
    


display_column('fresco_column_presidents', data.presidents);
display_column('fresco_column_pm', data.primeMinisters);
display_column('fresco_column_tutelle', data.tutelles);
display_column('fresco_column_delegue', data.deleguesSecretaires);


});
});



</script>

</body>

